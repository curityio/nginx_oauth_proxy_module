###################################################################################
# An NGINX configuration to test Docker deployment basics on a development computer
###################################################################################

worker_processes 1;
error_log /dev/stdout info;

# This ensures that valgrind can run the main Docker process rather than terminating immediately
daemon off;

# When testing Linux deployment we deploy a dynamic module
load_module modules/ngx_curity_http_oauth_proxy_module.so;

events { worker_connections 1024; }

http {
    sendfile on;

    server {
        listen 8081;
        access_log  /dev/stdout;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }
 
        location /api {
            
            # First run the module
            oauth_proxy on;
            oauth_proxy_cookie_name_prefix "example";
            oauth_proxy_encryption_key "ENCRYPTION_KEY";
            oauth_proxy_trusted_web_origin "https://www.example.com";
            oauth_proxy_cors_enabled on;
            oauth_proxy_allow_tokens on;

            # Then forward to the below API
            proxy_pass "http://localhost:8081/api-internal";
        }

        location /api-internal {

            # MIME types must be set like this
            default_type application/json;

            # On success, echo back headers
            add_header "authorization" $http_authorization;
            add_header "cookie" $http_cookie;
            add_header "x-example-csrf" $http_x_example_csrf;

            # Return a JSON response
            return 200 '{"message": "API was called successfully with ${http_authorization}"}';
        }
    }
}
